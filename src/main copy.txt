use std::fmt::Pointer;
use std::pin::Pin;
use std::thread;
use std::time::Duration;
use std::str::FromStr;
use std::sync::mpsc;

use anyhow::{
    bail, Error, Result
};

use esp_idf_svc::hal::peripheral::{Peripheral, PeripheralRef};
use esp_idf_svc::hal::{
    delay::Ets,
    gpio::*,
    peripherals::Peripherals,
    peripheral,
    spi::*,
    spi::config::*,
    units::FromValueType,
};
use esp_idf_svc::{
    eventloop::EspSystemEventLoop,
    wifi::*,
};
use mipidsi::interface::{self, SpiInterface};

use mipidsi::{
    Builder,
    models::ST7789,
    options::*,
};
use embedded_graphics::{
    prelude::*,
    pixelcolor::*,
    text::*,
    mono_font::{ascii::FONT_10X20, MonoTextStyle},
};

mod comm;


#[derive(Debug)]
#[toml_cfg::toml_config]
pub struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
}

fn initialize_runtime() {
    esp_idf_svc::sys::link_patches();
    esp_idf_svc::log::EspLogger::initialize_default();
}

use esp_idf_svc::hal::gpio::Pin as Pin2;

fn initialize_display(peripherals:Peripherals) -> &'static mipidsi::Display<SpiInterface<'static, SpiDeviceDriver<'static, SpiDriver<'static>>, PinDriver<'static, Gpio16, InputOutput>>, ST7789, PinDriver<'static, Gpio23, InputOutput>>
{
    // Obter periféricos disponíveis
    
    let spi = peripherals.spi2;
                   
    // Configurar atraso (timer)
    let mut delay = Ets;

    // Configurar pinos necessários
    let rst = PinDriver::input_output_od(peripherals.pins.gpio23).unwrap();
    let dc = PinDriver::input_output_od(peripherals.pins.gpio16).unwrap();
    let mut backlight = PinDriver::output(peripherals.pins.gpio4).unwrap();
    let sclk = peripherals.pins.gpio18;
    let sdo = peripherals.pins.gpio19;
    let cs = peripherals.pins.gpio5;

    // Inicializar driver SPI
    let spi_driver = SpiDriver::new(
        spi,
        sclk,
        sdo,
        None::<AnyIOPin>,
        &DriverConfig::new().dma(Dma::Channel1(240 * 135)),
    ).unwrap();

    let spi_device_driver = SpiDeviceDriver::new(
        spi_driver,
        Some(cs),
        &esp_idf_svc::hal::spi::config::Config::new()
            .baudrate(26.MHz().into())
            .data_mode(MODE_3),
    ).unwrap();

    // Criar interface SPI para o display
    let mut spi_buffer = [0u8; 256]; // Buffer de 256 bytes
    let spi_interface = SpiInterface::new(spi_device_driver, dc, &mut spi_buffer);

    // Inicializar o display
    let mut display = Builder::new(ST7789, spi_interface)
        .display_size(135, 240)
        .display_offset(52, 40) // Ajustar deslocamento
        .orientation(Orientation::new().rotate(Rotation::Deg90)) // Rotação
        .invert_colors(ColorInversion::Inverted) // Inverter cores
        .reset_pin(rst)
        .init(&mut delay).unwrap(); // Configurar com atraso

    // Ativar backlight
    backlight.set_high();

    log::info!("Display initialized successfully.");

    &display
}

fn main() -> Result<()> {

    initialize_runtime();
    log::info!("Running from main!");

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = CONFIG;
    log::info!("Loaded config file: {CONFIG:?}");

    let (tx, rx) = mpsc::channel();

    
    let peripherals = Peripherals::take().unwrap();

    let mut display = initialize_display(peripherals);
    log::info!("Display initialized.");

    // Draw centered text.
    display.clear(Rgb565::BLACK).unwrap();
    let character_style = MonoTextStyle::new(&FONT_10X20, Rgb565::WHITE);
    let text = "Rust-signer-v1";
    Text::with_alignment(
        text,
        display.bounding_box().center(),// + Point::new(0, 15),
        character_style,
        Alignment::Center,
    ).draw(&mut display).unwrap();

    let sysloop = EspSystemEventLoop::take().unwrap();
    let _wifi = match comm::wifi::config_and_connect_wifi(
        app_config.wifi_ssid,
        app_config.wifi_psk,
        peripherals.modem,
        sysloop
    ) {
        Ok(inner) => inner,
        Err(err) => {
            bail!("Could not connect to Wi-Fi network: {err:?}")
        }
    };

    log::info!("Connected to Wi-Fi network.");

    display.clear(Rgb565::BLACK).unwrap();
    let text = "Connected to Wi-Fi";
    Text::with_alignment(
        text,
        display.bounding_box().center(),// + Point::new(0, 15),
        character_style,
        Alignment::Center,
    ).draw(&mut display).unwrap();


    loop {
        thread::sleep(Duration::from_millis(1000));
    }

}
